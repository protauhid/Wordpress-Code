import {
  AlignmentToolbar,
  BlockControls,
  InspectorControls,
  PanelColorSettings,
  RichText,
  useBlockProps,
} from '@wordpress/blockEditor';

import {
  PanelBody,
  __experimentalUnitControl as UnitControl,
} from '@wordpress/components';

import { Fragment, useEffect } from '@wordpress/element';
import { __ } from '@wordpress/i18n';

// ЁЯФз ржЗржЙржирж┐ржХ ржЖржЗржбрж┐ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
function generateUniqueId(clientId) {
  return 'my-block-' + clientId.substr(0, 8); // clientId ржерзЗржХрзЗ ржЗржЙржирж┐ржХ ржЕржВрж╢ ржирж┐рж▓рж╛ржо
}

// ЁЯФз Edit ржХржорзНржкрзЛржирзЗржирзНржЯ
export default function Edit({ attributes, setAttributes, clientId }) {
  const {
    content,
    textColor,
    backgroundColor,
    fontSize,
    textAlign,
    blockStyle,
    uniqueId,
  } = attributes;

  // ЁЯЖФ clientId ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ ржирждрзБржи uniqueId рж╕рзЗржЯ ржХрж░рж┐ (ржпржЦржи ржмрзНрж▓ржХ ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ рж╣рзЯ)
  useEffect(() => {
    const newId = generateUniqueId(clientId);
    if (!uniqueId || uniqueId !== newId) {
      setAttributes({ uniqueId: newId });
    }
  }, [clientId]);

  // ЁЯОи attributes ржерзЗржХрзЗ рж╕рзНржЯрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗ blockStyle ржП рж╕рзЗржн ржХрж░рж┐
  useEffect(() => {
  if (uniqueId) {
    const customStyle = `
      .${uniqueId} {
        color: ${textColor};
        background-color: ${backgroundColor};
        font-size: ${fontSize};
        text-align: ${textAlign};
        margin: 40px;
      }
    `;
    setAttributes({ blockStyle: customStyle });
  }
});


  // тЬЕ ржмрзНрж▓ржХрзЗрж░ ржкрзНрж░ржкрж╕ (Gutenberg рж░рзЗржирзНржбрж╛рж░рж┐ржВ рж╕рзНржЯрж╛ржЗрж▓)
  const blockProps = useBlockProps({
    style: {
      textAlign,
    },
  });

  // тЬЕ JSX: Toolbar, Inspector ржПржмржВ ржорзВрж▓ ржХржиржЯрзЗржирзНржЯ
  return (
    <Fragment>
      {/* ЁЯФз ржЯрзБрж▓ржмрж╛рж░рзЗ ржЯрзЗржХрзНрж╕ржЯ ржЕрзНржпрж╛рж▓рж╛ржЗржиржорзЗржирзНржЯ */}
      <BlockControls>
        <AlignmentToolbar
          value={textAlign}
          onChange={(value) => setAttributes({ textAlign: value })}
        />
      </BlockControls>

      {/* ЁЯОЫя╕П рж╕рж╛ржЗржбржмрж╛рж░ рж╕рзЗржЯрж┐ржВрж╕ */}
      <InspectorControls>
        <PanelColorSettings
          title={__('Color Settings', 'my-blocks')}
          colorSettings={[
            {
              value: textColor,
              onChange: (color) => setAttributes({ textColor: color }),
              label: __('Text Color', 'my-blocks'),
            },
            {
              value: backgroundColor,
              onChange: (color) => setAttributes({ backgroundColor: color }),
              label: __('Background Color', 'my-blocks'),
            },
          ]}
        />

        <PanelBody title={__('Typography', 'my-blocks')} initialOpen={true}>
          <UnitControl
            label={__('Font Size', 'my-blocks')}
            value={fontSize}
            onChange={(value) => setAttributes({ fontSize: value })}
            units={['px', 'em', 'rem']}
          />
        </PanelBody>
      </InspectorControls>

      {/* ЁЯза ржЗржирж▓рж╛ржЗржи рж╕рзНржЯрж╛ржЗрж▓ ржмрзНрж▓ржХрзЗ ржкрзНрж░ржпрж╝рзЛржЧ */}
      <style>{blockStyle}</style>

      {/* ЁЯЦЛя╕П ржорзВрж▓ ржХржиржЯрзЗржирзНржЯ */}
      <div {...blockProps}>
        <RichText
          tagName="p"
          className={uniqueId}
          value={content}
          onChange={(value) => setAttributes({ content: value })}
          placeholder={__('Write something...', 'my-blocks')}
        />
      </div>
    </Fragment>
  );
}
